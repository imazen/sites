---
import type { CollectionEntry } from 'astro:content';
import { SITE, OPEN_GRAPH } from '../consts';
import { getLanguageFromURL, KNOWN_LANGUAGE_CODES } from '../languages';

import  i18next from "i18next";

type Props = { canonicalUrl: URL } & CollectionEntry<'docs'>['data'];

const { ogLocale, image, title, description, canonicalUrl } = Astro.props;

const lang = getLanguageFromURL(canonicalUrl.pathname);
//console.log("current language", lang);
i18next.changeLanguage(lang);

const translatedContentTitle =`${title} - ${i18next.t('siteTitleSuffix',SITE.titleSuffix)}`;
const translatedSiteName = i18next.t('siteTitleName',SITE.title);

const imageSrc = image?.src ?? OPEN_GRAPH.image.src;
const canonicalImageSrc = new URL(imageSrc, Astro.site);
const imageAlt = image?.alt ?? OPEN_GRAPH.image.alt;
---

<!-- Page Metadata -->
<link rel="canonical" href={canonicalUrl} />

<link rel="sitemap" href="/sitemap-index.xml">

<!-- OpenGraph Tags -->
<meta property="og:title" content={translatedContentTitle} />
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:locale" content={ogLocale ?? SITE.defaultLanguage} />
<!-- <meta property="og:image" content={canonicalImageSrc} />
<meta property="og:image:alt" content={imageAlt} /> -->
<meta name="description" property="og:description" content={description ?? SITE.description} />
<meta property="og:site_name" content={translatedSiteName} />

<!-- Twitter Tags -->
<!-- <meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content={OPEN_GRAPH.twitter} />
<meta name="twitter:title" content={formattedContentTitle} />
<meta name="twitter:description" content={description ?? SITE.description} />
<meta name="twitter:image" content={canonicalImageSrc} />
<meta name="twitter:image:alt" content={imageAlt} /> -->

<!--
  TODO: Add json+ld data, maybe https://schema.org/APIReference makes sense?
  Docs: https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data
  https://www.npmjs.com/package/schema-dts seems like a great resource for implementing this.
  Even better, there's a React component that integrates with `schema-dts`: https://github.com/google/react-schemaorg
-->
