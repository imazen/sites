---
import { getLanguageFromURL } from '../../languages';
import {  KNOWN_LANGUAGES } from '../../consts';

import  i18next from "i18next";

type Props = {
	currentPage: string;
	lang: string;
};

const { currentPage, lang} = Astro.props;
const currentPageMatch = currentPage.endsWith('/')
	? currentPage.slice(1, -1)
	: currentPage.slice(1);

import { getCollection } from 'astro:content';

// Get all `src/content/docs/` entries
const allDocsPosts = await getCollection('docs', ({ data }) => {
  return true;
});

// Sort allDocsPosts based on child.data.sidebar-sort-priority, but use a default value of 100 if it's not set
allDocsPosts.sort((a, b) => {
  return (b.data['sidebar_sort_priority'] || 0) - (a.data['sidebar_sort_priority'] || 0);
});

// find the matching key in the KNOWN_LANGUAGES map for value lang
const langName = Object.keys(KNOWN_LANGUAGES).find(key => 
KNOWN_LANGUAGES[key] === lang);

const sidebarTitle = i18next.t("sidebarTitle",`Topics (${langName})`);

const langSubset = [[sidebarTitle, lang]]; // Object.entries(KNOWN_LANGUAGES)

---
<nav aria-labelledby="grid-left">
	<ul class="nav-groups">

		{
			langSubset.map(([sidebarTitle, langCode]) => (
				<li>
					<div class="nav-group">
						<h2 class="nav-group-title">{sidebarTitle}</h2>
						<ul>
							{allDocsPosts.filter((p) => { return p.slug.startsWith(langCode); }).map((child) => {
							const url = Astro.site?.pathname + child.slug;
							return (
								<li class="nav-link">
									<a href={url} aria-current={currentPageMatch === child.slug ? 'page' : false}>
										{child.data.title}
									</a>
								</li>
							);
						})}
						</ul>
					</div>
				</li>
			))
		}
		<!-- <li>
			<div class="nav-group">
				<h2 class="nav-group-title">All</h2>
				<ul>
				
					{allDocsPosts.map((child) => {
							const url = Astro.site?.pathname + child.slug;
							return (
								<li class="nav-link">
									<a href={url} aria-current={currentPageMatch === child.slug ? 'page' : false}>
										{child.data.title}
									</a>
								</li>
							);
						})}
				</ul>
			</div>
		</li> -->
	</ul>
</nav>

<script is:inline>
	window.addEventListener('DOMContentLoaded', () => {
		var target = document.querySelector('[aria-current="page"]');
		if (target && target.offsetTop > window.innerHeight - 100) {
			document.querySelector('.nav-groups').scrollTop = target.offsetTop;
		}
	});
</script>

<style>
	nav {
		width: 100%;
		margin-right: 1rem;
	}

	.nav-groups {
		height: 100%;
		padding: 2rem 0;
		overflow-x: visible;
		overflow-y: auto;
		max-height: 100vh;
	}

	.nav-groups > li + li {
		margin-top: 2rem;
	}

	.nav-groups > :first-child {
		padding-top: var(--doc-padding);
	}

	.nav-groups > :last-child {
		padding-bottom: 2rem;
		margin-bottom: var(--theme-navbar-height);
	}

	.nav-group-title {
		font-size: 1rem;
		font-weight: 700;
		padding: 0.1rem 1rem;
		text-transform: uppercase;
		margin-bottom: 0.5rem;
	}

	.nav-link a {
		font-size: 1rem;
		margin: 1px;
		padding: 0.3rem 1rem;
		font: inherit;
		color: inherit;
		text-decoration: none;
		display: block;
	}

	.nav-link a:hover,
	.nav-link a:focus {
		background-color: var(--theme-bg-hover);
	}

	.nav-link a[aria-current='page'] {
		color: var(--theme-text-accent);
		background-color: var(--theme-bg-accent);
		font-weight: 600;
	}

	@media (min-width: 50em) {
		.nav-groups {
			padding: 0;
		}
	}
</style>

<style is:global>
	:root.theme-dark .nav-link a[aria-current='page'] {
		color: hsla(var(--color-base-white), 100%, 1);
	}
</style>
