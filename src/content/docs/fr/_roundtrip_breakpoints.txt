---
title: Breakpoints and Images
description: >-
  Why some breakpoints (but not all) are important for your images
taskInputHash: c2ab4bdd359c3735
lang: en
---
### Background

Small screens and large monitors need different layouts. For `srcset` and `sizes`, we need to know when the layout changes.

Web developers must decide what to shrink, hide, or move on small screens—or more commonly, what to extend, reveal, or add on large screens. They also have very little information. Is the user using a tablet or a phone in landscape mode—or a small browser window?

We need to choose an arbitrary viewport width where the layout changes. This is called a **breakpoint**. It's an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has an [excellent article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (like logos, icons, or buttons) can be immune to layout changes caused by these breakpoints (and be satisfied with [srcset density descriptors](/en/density-descriptors)).

Images that are the main content will be limited by the size of their container. Generally, the main content area of a page will be limited to some width on larger screens, a `max-width`, but on smaller screens, the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it will be harder to calculate the effective sizing rules, because the percentage of viewport width that the image takes up will change.

### The easy method

That being said, don't worry too much about this. You will probably be just fine with the following method:

1. At what size does the main column (or the image container) stop growing? Up to this viewport width, we can use `100vw` for the image's `sizes` attribute to say that the image takes up 100% of the viewport width.  
2. What is the maximum width the container ever reaches? We can set this as a fixed width for everything else.

If your answer to the first question is 700px and your answer to the second question is 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```


> You might think the browser could easily handle all these calculations for us based on CSS stylesheets. Unfortunately, browsers are aggressively impatient to pick an image URL *before* stylesheets are downloaded. So we have to do the calculations ourselves, and they deserve to be done imperfectly.
=====================

Content prompt used: 
Translate the following to French, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'fr' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Points de rupture et images
2. Pourquoi certains points de rupture (mais pas tous) sont importants pour vos images 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
