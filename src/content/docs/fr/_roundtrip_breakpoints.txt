---
title: Breakpoints and Images
description: >-
  Why some breakpoints (but not all) matter for your images
taskInputHash: b9dc6c0d27d7c8b7
lang: en
ignore: '/* cSpell:locale fr,en*/'
date_published: '2023-03-26'
date_modified: '2023-03-31'
date_updated: '2023-03-31'
---
### Context

Small screens and large monitors require different layouts. For the needs of `srcset` and `sizes`, we need to know when the layout changes.

Web developers need to decide what to reduce, hide or move on small screens - or more commonly, what to stretch, reveal or add on large screens. They also have very little information. Is the user on a tablet or a phone in landscape mode - or a small browser window?

We need to choose an arbitrary viewport width where the layout changes. This is called a **breakpoint**. It's an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has an [excellent article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (like logos or icons or buttons) may be immune to layout changes caused by these breakpoints (and be fine with [srcset density descriptors](/en/density-descriptors)).

Images in the main content will be constrained by the size of their container. Typically, the main content area of a page will be limited to some width on larger screens, a `max-width`, but on smaller screens, the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it will be harder to calculate effective sizing rules, because the percentage of the viewport width the image occupies will change.

### The easy way

That being said, don't think too much about this. You'll probably be just fine with the following approximation method:

1. At what size does the main column (or image container) stop growing? Up to this viewport width, we can use `100vw` for the `sizes` attribute of the image to say that the image takes up 100% of the viewport width.
2. What is the maximum width the container ever reaches? We can set that as a fixed width for everything else.

If your answer to 1 was 700px and your answer to 2 was 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> You thought the browser might handle all these calculations for us based on CSS. Unfortunately, browsers are aggressively keen to choose an image URL *before* downloading style sheets. We have to do the calculations ourselves, and they're well worth it if we don't get them perfectly.
=====================

Content prompt used: 
Translate the following to French, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'fr' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Points de rupture et images
2. Pourquoi certains points de rupture (mais pas tous) sont importants pour vos images 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
