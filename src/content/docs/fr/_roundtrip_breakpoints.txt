---
title: Breakpoints and Images
description: >-
  Why some breakpoints (but not all) matter for your images
taskInputHash: 93d9bc4002109180
lang: en
---
### Context

Small screens and big screens require different layouts. In the context of `srcset` and `sizes`, we must determine which breakpoint to use.

Web developers need to decide what to shrink, hide, or move on smaller screens—or more commonly, what to enlarge, reveal, or add on larger screens. They also have very little information about the user. Are they on a tablet or a landscape phone—or in a small browser window?

We must choose an arbitrary viewport width at which the layout changes. This is called a **breakpoint**. It's an arbitrary number of CSS pixels (not device pixels). Polypane has an [excellent article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (such as logos, icons, or buttons) can be immunized against layout changes caused by these breakpoints (and work well with [srcset density descriptors](/en/density-descriptors)).

Main content images will be limited by the size of their container. Typically, the main content area of a page will be limited to a certain width on larger screens, a `max-width`, but on smaller screens, the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it will be harder to calculate the effective sizing rules, because the percentage of viewport width that the image occupies will change.

### The Easy Method

That being said, don't worry too much. You'll probably be just fine with the following approximation:

1. At what size does the main column (or image container) stop growing? Up to this viewport width, we can use `100vw` for the image's `sizes` attribute to say that the image takes up 100% of the viewport width.
2. What's the largest width the container ever gets? We can set that as a fixed width for everything else.

If your answer to 1 was 700px and your answer to 2 was 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not image or device pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```


> One might think that the browser could handle all of these calculations for us based on the style sheets. Unfortunately, browsers are very eager to choose an image URL *before* downloading the style sheets. So we have to do the calculations ourselves, which is fine by them if we don't do it perfectly.
=====================

Content prompt used: 
Translate the following to French, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'fr' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article:
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images 


Roundtrip (isolated) prompt used: 
Translate the following to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as {{Note that the term used here is not the technical term...}}.
