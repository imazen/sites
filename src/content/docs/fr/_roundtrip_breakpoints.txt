---
title: Breakpoints and Images
description: >-
  Why some breakpoints (but not all) matter for your images
taskInputHash: 40287daab3fdebb3
lang: en
---
### Context

Small screens and large monitors require different layouts. For the needs of `srcset` and `sizes`, we need to know when the layout changes.

Web developers must decide what to reduce, hide, or move on small screens—or more commonly, what to expand, reveal, or add on large screens. They also have very little information. Is the user on a tablet or phone in landscape mode—or a small browser window?

We have to pick an arbitrary viewport width when the layout changes. This is called a **breakpoint**. It’s an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has an [excellent article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Certain images (like logos or icons or buttons) might be immune to layout changes caused by those breakpoints (and be fine with [srcset density descriptors](/en/density-descriptors)).

Content images will be limited by their container’s size. Typically, a page’s main content area will be limited to a certain width on larger screens—a `max-width`—but on small screens, the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it will be harder to calculate effective sizing rules because the percentage of the viewport width that the image occupies will change.

### The easy way

That being said, don’t worry about this too much. You will probably be fine using the following approximation method:

1. At what size does the main column (or image container) stop growing? Up to that viewport width, we can use `100vw` in the image’s `sizes` attribute to tell it to take up 100% of the viewport width.
2. What is the maximum width the container ever reaches? We can set that as a fixed width for everything else.

If your answer to 1 was 700px and your answer to 2 was 800px, you could use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```



> You might have thought the browser could handle all these calculations for us based on CSS. Unfortunately, browsers are aggressively eager to pick an image URL *before* downloading style sheets. So we have to do the math ourselves, and they’re well worth it if we don't get them perfect.
=====================

Content prompt used: 
Translate the following to French, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'fr' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Points de rupture et images
2. Pourquoi certains points de rupture (mais pas tous) sont importants pour vos images 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
