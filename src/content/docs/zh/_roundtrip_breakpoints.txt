---
taskInputHash: f21b9e8f3b842e81
title: Breakpoints and Images
description: Why some (but not all) breakpoints matter for your images
date_published: '2025-02-07'
date_modified: '2025-02-07'
lang: en
---
### Background

Small screens and large displays require different layouts. For the purposes of `srcset` and `sizes`, we need to know when the layout changes.

Web developers must decide what content to shrink, hide, or reposition on smaller screens—or more commonly, what to expand, display, or add on larger screens. They have very little information to work with. Is the user on a tablet or phone in landscape mode, or in a small browser window?

We must choose an arbitrary viewport width to change the layout. This is called a **breakpoint**. It is an arbitrary CSS pixel ([not device pixels](/zh/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) about common breakpoints.

Some images (such as logos, icons, or buttons) might not be affected by these layout changes introduced by breakpoints (and are suited for [srcset density descriptors](/zh/density-descriptors)).

Primary content images will be constrained by the size of their container. Typically, the main content area of a page will be restricted to a certain width on the largest screens, i.e., `max-width`, but on smaller screens, the main content area will fill the entire viewport.

If you have multiple columns at certain breakpoints, calculating effective `sizes` rules becomes more challenging because the percentage of the viewport width occupied by an image will change.

### Easy Method

That said, don't think too much about it. You may be very satisfied with the following approximation:

1. At what size does the main column (or the image's container) stop growing? Before reaching that viewport width, we can use `100vw` for the image's `sizes` attribute to indicate that the image occupies 100% of the viewport width.
2. What is the maximum width that container reaches? We can set it as a fixed `width` for everything else.

If your answer to question 1 is 700px, and your answer to question 2 is 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels.-->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> You may think that the browser could handle all these calculations for us nicely based on the CSS. Unfortunately, browsers eagerly choose an image URL before the stylesheets are downloaded. Therefore, we have to do the calculations ourselves, and if we don't get them perfect, well, it's what they deserve.

---

{{Note that the term "sizes" was explained indirectly; it might be clearer if explicitly defined as an HTML attribute in the first mention.}}

{{The phrase "it's what they deserve" in the last sentence might come across as harsh in professional documentation. It could be rephrased for a more neutral tone.}}
=====================

Content prompt used: 
Translate the following to Simplified Chinese, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'zh' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. 断点与图像
2. 为什么某些（但不是所有）断点对您的图像很重要 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
