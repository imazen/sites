---
title: Breakpoints and Images
description: Why your images are affected by some (but not all) breakpoints
taskInputHash: 381f678e05b50b44
lang: en
---
### Background

Different layouts are required for small and large screens. In order to use `srcset` and `sizes`, we need to know when the layout changes.

Web developers must decide what content to shrink, hide, or reposition on smaller screens, or more commonly, what content to expand, reveal, or add on larger screens. However, they have very little information to go on. Is the user on a tablet, a phone in landscape mode, or a small browser window?

We must choose an arbitrary viewport width at which the layout changes. This is called a **breakpoint**. It is an arbitrary amount of CSS pixels ([not device pixels](/en-us/pixels-not-pixels)) that Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) about common breakpoints.

Some images, such as logos, icons, or buttons, may be exempt from layout shifts caused by these breakpoints (and can use [density descriptors in the `srcset`](/en-us/density-descriptors)).

Main content images will be limited by the size of their container. Typically, the main content area of a page is limited to a certain width on the largest screen, i.e., `max-width`, but on small screens, the main content area will fill the entire viewport.

If there are multiple columns at some breakpoints, calculating the effective size rules becomes more difficult because the percentage of the viewport width that the image occupies will change.

### A Simple Approach

That being said, don't overthink it. You might be perfectly happy with approximate values like these:

1. What's the size at which the main column (or image container) stops growing? Within this viewport width range, we can use `100vw` for the `sizes` attribute of the image to mean it takes up 100% of the viewport width.
2. What's the max width of the container? We can set it to a fixed `width` for all the rest of the content.

For example, if your answer to step one is 700 pixels and your answer to step two is 800 pixels, you can use the following `sizes` attribute:

```html
<!-- Note that "px" here refers to CSS pixels, not device pixels or image pixels -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```



> You might think browsers could handle all these calculations well for us based on the CSS. Unfortunately, browsers are too eager to *prioritize* image URLs before the style sheets are downloaded. Therefore, we have to do the calculations ourselves, and blame them if we can't figure it out.
=====================

Content prompt used: 
Translate the following to Simplified Chinese, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'zh' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. 断点和图像
2. 为什么您的图像会受到某些（但不是全部）断点的影响 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
