---
title: Examples of using the <picture> element
description: Examples of using the <picture> element for responsive images, art direction, and different image formats.
taskInputHash: 84ee999fd4dc56dc
lang: en
---
Here are some examples of using the `<picture>` element and their explanations:

1. Example of responsive images:

```html
<picture>
  <source srcset="image-large.jpg" media="(min-width: 768px)" />
  <source srcset="image-medium.jpg" media="(min-width: 480px)" />
  <img src="image-small.jpg" alt="An image" />
</picture>
```

Explanation: In this example, the `<picture>` element is used to provide different image sources for different screen sizes. The `<source>` element uses the `srcset` and `media` attributes to specify different image sources and the conditions for using each source. When the conditions specified in the `<source>` element are not met, the `<img>` element is used as a fallback image for older browsers.

2. Example of art direction:

```html
<picture>
  <source srcset="image-wide.jpg" media="(orientation: landscape)" />
  <img src="image-portrait.jpg" alt="An image" />
</picture>
```

Explanation: In this example, the `<picture>` element is used to provide different image sources based on the device orientation. The `<source>` element uses the `media` attribute and sets it to `(orientation: landscape)` to provide a landscape-oriented image source, while the `<img>` element provides a portrait-oriented image source.

3. Example of different image formats:

```html
<picture>
  <source srcset="image.webp" type="image/webp" />
  <source srcset="image.png" type="image/png" />
  <img src="image.jpg" alt="An image" />
</picture>
```

Explanation: In this example, the `<picture>` element is used to provide different image sources for different image formats. The `<source>` element uses the `srcset` and `type` attributes to specify different image sources and their image formats, while the `<img>` element is used as a fallback image for older browsers that do not support the `<picture>` element.

## Breakpoints

In responsive design, breakpoints are used to define how the layout of a website or application should change as the viewport size changes. Breakpoints are usually defined using media queries in CSS and apply different styles based on screen width. These breakpoints can be combined with the `<picture>` element to provide different image sources for different screen sizes.

For example, in the first example above, we used the `media` attribute to specify screen width and therefore specified which screen width should use each source. When the screen width is greater than or equal to 768 pixels, the `image-large.jpg` source will be used; when the screen width is greater than or equal to 480 pixels but less than 768 pixels, the `image-medium.jpg` source will be used; and when the screen width is less than 480 pixels, the `image-small.jpg` source will be used. These operations can provide appropriately sized images for each device, reducing page load times and improving user experience.

Breakpoints can be defined for any screen size and multiple breakpoints can be used to create layouts that respond to a wide range of devices. By combining breakpoints with the `<picture>` element, flexible and responsive designs can be created that look great on any device.
=====================

Content prompt used: 
Translate the following to Simplified Chinese, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'zh' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Examples using <picture> element
 2. Provides examples using the <picture> element, for responsive images, art direction and different image formats

Metadata returned1. 使用 <picture> 元素的例子
2. 提供使用 <picture> 元素的示例，用于可响应式图片、艺术向导和不同的图片格式。 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
