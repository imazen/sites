---
title: Breakpoints & Images
description: Why some (but not all) breakpoints are important for your images
taskInputHash: 656ef63f6a07cec4
lang: en
---
### Background

Small screens and large screens require different layouts. In order to use `srcset` and `sizes`, we need to know at which point the layout changes.

Web developers must decide what to shrink, hide, or move on smaller screens - or more commonly, what to expand, show, or add on larger screens. They also have very little information to go on. Is the user using a tablet or a phone in landscape mode - or a window for a small browser?

We have to choose an arbitrary viewport width where the layout changes. This is called a **breakpoint**. It’s an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (like logos or icons or buttons) may be immune to the layout shifts caused by these breakpoints (and work well with [srcset density descriptors](/en/density-descriptors)).

Main content images will be limited by the size of their container. Typically, the main content area on a page will be constrained to a certain width on the largest screens, a `max-width`, but on small screens, the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it will be harder to calculate effective sizing rules because the percentage of the viewport width that the image takes up will change.

### The Simple Way

That being said, don't overthink this. You'll probably be very OK with the following approximation:

1. At what size does the main column (or the image's container) stop growing? Up to that viewport width, we can use `100vw` for the image's `sizes` attribute to say that the image takes up 100% of the viewport width.
2. What is the largest width the container ever gets to? We can set that as a fixed `width` for everything else.

If your answer to 1 was 700px and your answer to 2 was 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> You might think the browser can handle all these calculations nicely for us based on the CSS. Unfortunately, the browser is aggressively eager to pick a *image URL before* stylesheets load. So we have to do the calculations ourselves, and it's fair game if we don't get it perfect.

=====================

Content prompt used: 
Translate the following to Swedish, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'sv' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Breakpoints & bilder
2. Varför vissa (men inte alla) breakpoints är viktiga för dina bilder 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
