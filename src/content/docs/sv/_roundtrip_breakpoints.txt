---
title: Breakpoints & Images
description: Why certain (but not all) breakpoints are important for your images
taskInputHash: 28770a79c61c9c7e
lang: en
---
### Background

Small screens and large screens require different layouts. For `srcset` and `sizes` we need to know at what point the layout changes.

Web developers must decide what to shrink, hide or move on smaller screens - or more often, what to expand, reveal, or add on larger screens. They also have very little information to go on. Is the user on a tablet, or a phone in landscape mode - or a small browser window?

We have to choose an arbitrary viewport width where the layout changes. This is called a **breakpoint**. It is an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) about commonly used breakpoints.

Some images (like logos or icons, or buttons) may be unaffected by layout shifts caused by these breakpoints (and work well with [srcset density descriptors](/en/density-descriptors)).

Main content images will be limited by the size of their container. Typically, the main content area of a page will be limited to a certain width on the largest screens, a `max-width`, but on small screens the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it becomes harder to calculate the effective sizing rules, because the percentage of viewport width that the image takes up will change.

### The simple way

That being said, don't overthink this. You will probably be perfectly OK with the following approximation:

1. At what size does the main column (or the image container) stop growing? Up to that viewport width, we can use `100vw` for the image size attribute to say that the image takes up 100% of the viewport width.
2. What is the maximum width the container ever reaches? We can set that as a fixed `width` for everything else.

If your answer to 1 was 700px and your answer to 2 was 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> You'd think the browser could easily handle all these calculations for us based on the CSS. Unfortunately, browsers are aggressively keen on choosing an image URL *before* stylesheets are downloaded. So we have to do the calculations ourselves, and they're doing us a favor if we don't get them perfect.

{{Note that the term used here is not the technical term, but rather an approximation used for simplification in this context.}}
=====================

Content prompt used: 
Translate the following to Swedish, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'sv' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Brytpunkter & bilder
2. Varför vissa (men inte alla) brytpunkter är viktiga för dina bilder 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
