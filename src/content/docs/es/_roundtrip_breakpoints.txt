---
title: Breakpoints and Images
description: >-
  Why some (but not all) breakpoints are important for your images
date_published: '2025-02-07'
date_modified: '2025-02-07'
lang: en
---
### Background

Small screens and large monitors need different designs. For the purpose of `srcset` and `sizes`, we need to know at what point the design changes.

Web developers have to decide what to shrink, hide, or relocate on smaller screens – or more commonly, what to expand, reveal, or add on larger screens. They also have very little information to go on. Is the user on a tablet or a phone in landscape mode – or on a small browser window?

We have to choose an arbitrary viewport width where the design changes. This is called a **breakpoint**. It is an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (like logos, icons, or buttons) might be immune to design changes caused by these breakpoints (and do well with [srcset density descriptors](/en/density-descriptors)).

Main content images will be limited by the size of their container. Typically, the main content area of a page will be limited to a certain width on larger screens, a `max-width`, but on small screens, the main content area will fill the entire viewport.

If you have more than one column at some breakpoints, it will be harder to calculate effective sizing rules, as the percentage of the viewport width that the image occupies will change.

### The Easy Method

That said, don't overthink it. You'll probably be just fine with the following approach:

1. At what size does the main column (or the image container) stop growing? Up to that viewport width, we can use `100vw` for the image `sizes` attribute to say the image takes up 100% of the viewport width.
2. What is the maximum width that container ever reaches? We can set that as a fixed `width` for everything else.

If your answer to 1 was 700 pixels and your answer to 2 was 800 pixels, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> You might think the browser could handle all these calculations for us based on the CSS. Unfortunately, browsers are aggressively eager to pick an image URL *before* stylesheets are downloaded. So we have to do the calculations ourselves, and they deserve it if we don't get them perfect.

{{There are no notable mistakes or clumsy phrasing in the translated text.}}
=====================

Content prompt used: 
Translate the following to Spanish, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'es' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Puntos de quiebre e imágenes
2. Por qué algunos (pero no todos) puntos de quiebre son importantes para tus imágenes 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
