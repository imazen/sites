---
title: Breakpoints and Images
description: >-
  Why some (but not all) breakpoints are important for your images
taskInputHash: 6e341c83b88ec4e2
lang: en
---
### Background

Small screens and large monitors need different designs. For the purpose of `srcset` and `sizes`, we need to know at what point the design changes.

Web developers must decide what to shrink, hide or relocate on smaller screens, or more commonly, what to expand, reveal or add on larger screens. They also have very little information to work with. Is the user on a tablet or a horizontally oriented phone or a small browser window?

We have to choose an arbitrary viewport width at which the design changes. This is called a **breakpoint**. It's an arbitrary CSS pixel number ([not a device pixel number](https://www.html5rocks.com/en/mobile/high-dpi/#toc-pixels-css-versus-device)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on common breakpoints used. 

Some images (like logos or icons or buttons) might be immune to design changes caused by these breakpoints (and be fine with [srcset density descriptors](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#Resolution_switching_Density_descriptors)).


Main content images will be constrained by the size of their container. Typically, a website's main content area will be limited to a certain width on larger screens, a `max-width`, while on smaller screens the main content area will take up the entire viewport. 

If you have more than one column at some breakpoints, calculating effective size rules will be harder, as the percentage of viewport width that the image occupies will change.

### The easy method

That being said, don't overcomplicate things. You'll likely be just fine with the following approach:

1. At what size does the main column (or image container) stop growing? Up to that viewport width, we can use `100vw` for the `sizes` attribute to say that the image takes up 100% of the viewport width.  
2. What is the maximum width that container reaches? We can set that as a fixed `width` for everything else. 

If your answer to 1 was 700px and your answer to 2 was 800px, you can use the following `sizes` attribute: 

```html
<!-- These are CSS pixels, not device or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> One would think the browser could easily handle all these calculations for us based on CSS. Unfortunately, browsers are eager to pick an image URL *before* stylesheets are downloaded. So we have to do the calculations ourselves, and it serves them well if we don't get it perfect.
=====================

Content prompt used: 
Translate the following to Spanish, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'es' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Puntos de quiebre e imágenes
2. Por qué algunos (pero no todos) los puntos de quiebre son importantes para tus imágenes 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
