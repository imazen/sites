---
title: Breakpoints and Images
description: Why some (but not all) breakpoints matter for your images
taskInputHash: e6ea31b34a72e447
lang: en
---
### Context

Small screens and large monitors require different layouts. For the purpose of `srcset` and `sizes`, we need to know at which point the layout changes.

Web developers must decide what to reduce, hide, or move on smaller screens - or more commonly, what to expand, reveal, or add on larger screens. Additionally, they have little information to work with. Is the user using a tablet or a smartphone in landscape mode - or a small browser window?

We need to choose an arbitrary viewport width at which the layout changes. This is called a **breakpoint**. It's an arbitrary CSS pixel value ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (like logos, icons or buttons) may be immune to layout changes caused by these breakpoints (and will work fine with [density descriptors in `srcset`](/en/density-descriptors)).

Main content images will be constrained by the size of their container. Typically, the main content area of a page will be restricted to a certain width on larger screens, a `max-width`, but on smaller screens the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it becomes harder to calculate the actual sizing rules, as the percentage of viewport width that the image occupies will change.

### The Easy Way

That being said, don't overthink it. You're probably going to be just fine with the following approximation:

1. At what point does the main column (or image container) stop growing? Until that viewport width, we can use `100vw` in the image `sizes` attribute to indicate that the image occupies 100% of viewport width.
2. What's the maximum width the container achieves? We can set that fixed width for everything else.

If your answer to 1 was 700px and the answer to 2 was 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```



> You might think that the browser could handle all these calculations for us based on CSS. Unfortunately, browsers are aggressively eager to choose an image URL *before* stylesheets are downloaded. So we have to do the math ourselves, and it'll be helpful to them if we don't get it perfectly right.
=====================

Content prompt used: 
Translate the following to Italian, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'it' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Breakpoint e immagini
2. Perch√© alcuni (ma non tutti) i breakpoint sono importanti per le tue immagini 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
