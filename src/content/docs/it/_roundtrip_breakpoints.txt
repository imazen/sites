---
title: Breakpoints and Images
description: Why some (but not all) breakpoints matter for your images
taskInputHash: 376271cff22dc9c5
lang: en
---
### Context

Small screens and larger monitors require different layouts. For `srcset` and `sizes` purposes, it's necessary to know at which point the layout changes.

Web developers need to decide what to shrink, hide, or move on smaller screens - or more commonly, what to expand, reveal, or add on larger screens. They also have very little information to go on. Is the user using a tablet or phone in landscape mode - or a small browser window?

We have to choose an arbitrary viewport width at which the layout changes. This is called a **breakpoint**. It's an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (like logos, icons, or buttons) might be immune to layout shifts caused by these breakpoints (and will work well with [srcset density descriptors](/en/density-descriptors)).

Images in the main content will be limited by the size of their container. Typically, the main content area of a page will be limited to a certain width on larger devices, a `max-width`, but on smaller screens, the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it will be harder to calculate the actual sizing rules, since the percentage of viewport width that the image occupies will change.

### The easy method

That being said, don't overcomplicate things. You'll probably be fine with the following approximation:

1. At what size does the main column (or image container) stop growing? Until that viewport width, we can use `100vw` in the image's `sizes` attribute to indicate that the image occupies 100% of the viewport width.
2. What is the maximum width that container reaches? We can set it as a fixed `width` for everything else.

If the answer to point 1 is 700px and the answer to point 2 is 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> You might think that the browser can handle all these calculations perfectly for us based on CSS. Unfortunately, browsers are aggressively eager to choose an image URL *before* style sheets are downloaded. So we have to do the calculations ourselves, and that's okay if it's not perfect.
=====================

Content prompt used: 
Translate the following to Italian, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'it' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Breakpoint e immagini
2. Perch√© alcuni (ma non tutti) i breakpoint sono importanti per le tue immagini 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
