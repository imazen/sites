---
title: Breakpoints & Images
description: Why some (but not all) breakpoints matter for your images
taskInputHash: 6532c039ed74cf5c
lang: en
---
### Background

Small screens and large monitors require different layouts. For `srcset` and `sizes`, we need to know when the layout changes.

Web developers need to make decisions about what should be reduced, hidden, or moved on smaller screens or what should be expanded, revealed, or added on larger ones. They also have very little information available. Is the user on a tablet or phone in landscape mode or in a small browser window?

We need to choose any viewport width at which the layout changes. This is called a **breakpoint**. It can be any number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on common breakpoints.

Some images (such as logos, icons, or buttons) can be immune to the layout shifts caused by these breakpoints (and are fine with [srcset Density Descriptors](/en/density-descriptors)).

Main content images are limited by the size of their container. Typically, the main area of a page layout is limited to a certain width (`max-width`) on the largest screens, but on small screens, the main content area fills the entire viewport.

If you have more than one column at some breakpoints, it becomes harder to calculate effective size rules because the percentage of the viewport width that the image occupies changes.

### The Simple Method

That doesn't mean you should fret over it. You’ll probably get by just fine using the following approach:

1. At what size does the main column (or image container) stop growing? Up to that viewport width, we can use `100vw` for the `sizes` attribute to indicate that the image takes up 100% of the viewport width.
2. What is the maximum width the container will ever be? We can set that as a fixed `width` for everything else.

If your answer to 1 is 700px and your answer to 2 is 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px" />
```



> One might think that the browser could be so nice as to do all these calculations for us based on the CSS. Unfortunately, browsers are aggressively trying to choose an image URL *before* downloading stylesheets. So we have to do the calculations ourselves. And if we’re not perfect, it's their problem.
=====================

Content prompt used: 
Translate the following to German, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'de' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Breakpoints & Bilder
2. Warum manche (aber nicht alle) Breakpoints wichtig für Ihre Bilder sind 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
