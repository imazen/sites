---
title: Breakpoints & Images
description: Why some (but not all) breakpoints are important for your images.
taskInputHash: de254d45ab719b4d
lang: en
---
### Background

Small screens and large monitors require different layouts. For `srcset` and `sizes`, we need to take this into account.

Web developers need to decide what to shrink, hide or move on smaller screens - or what to expand, reveal or add on larger screens. However, they have very little information about it. Is the user on a tablet or a phone in landscape mode - or a small browser window?

We have to choose an arbitrary viewport width at which the layout changes. That's called a **breakpoint**. It's an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (like logos, icons, or buttons) may be immune to the layout shifts caused by these breakpoints (and be okay with [density descriptors of srcset](/en/density-descriptors)).

Main content images are constrained by the size of the container. Typically, a page's main content is limited to a specific width, a `max-width`, on the largest screens, but on smaller screens, main content fills the full viewport width.

If you have more than one column at some breakpoints, it becomes harder to calculate effective size rules because the percentage of the viewport width the image occupies will change.

### The simple method

However, you shouldn't think about this too much. You will probably be very happy with the following approximation:

1. At what size does the main column (or the image's container) stop growing? Up to this viewport width, we can use `100vw` for the `sizes` attribute of the image to say that the image occupies 100% of the viewport width.
2. What is the maximum width the container will ever reach? We can set that as a fixed `width` for everything else.

If your answer is 700px for step 1 and 800px for step 2, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> One might think that the browser could handle all these calculations for us based on the CSS nicely. Unfortunately, browsers are very greedy about choosing an image URL *before* downloading stylesheets. Therefore, we have to make the calculations ourselves, and it is only fair that we don't get them perfect.
=====================

Content prompt used: 
Translate the following to German, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'de' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article:
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images 


Roundtrip (isolated) prompt used: 
Translate the following to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as {{Note that the term used here is not the technical term...}}.
