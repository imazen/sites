---
title: Breakpoints & Images
description: Why some (but not all) breakpoints are important for your images
taskInputHash: 62e4888677f4c953
lang: en
---
### Background

Small screens and large monitors require different layouts. For `srcset` and `sizes`, we need to know at which point the layout changes.

Web developers have to decide what to shrink, hide or move on smaller screens and what to expand, reveal or add on larger screens. They also have very little information to go on. Is the user on a tablet or phone in landscape mode, or a small browser window?

We have to choose an arbitrary viewport width at which the layout changes. This is called a **breakpoint**. It's an arbitrary number of CSS pixels ([not device pixels](/en/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) on commonly used breakpoints.

Some images (such as logos or controls or buttons) may be immune to the layout shifts caused by these breakpoints (and are fine with [srcset density descriptors](/en/density-descriptors)).

Main content images are limited by the size of their container. Typically, the main content area of a page is limited to a `max-width` on the largest screens, but on small screens, the main content area fills the entire viewport.

If you have more than one column at some breakpoints, it gets harder to calculate the effective size rules as the percentage of viewport width that the image takes up changes.

### The Easy Approach

That being said, you shouldn't overthink it. You will probably do just fine with the following approximation:
 
1. At what size does the main column (or the image's container) stop growing? Up to this viewport width, we can use `100vw` for the `sizes` attribute of the image to say that the image takes 100% of the viewport width.
2. What is the maximum width that the container will ever reach? We can set that as a fixed `width` for everything else.

If your answer to 1 was 700px and your answer to 2 was 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> You might think the browser could handle all these calculations nicely for us based on the CSS. Unfortunately, browsers are aggressively determined to select an image URL *before* downloading the stylesheets. So we have to do the calculations ourselves, and it serves them right if we don't get it perfect.
=====================

Content prompt used: 
Translate the following to German, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'de' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Breakpoints & Bilder
2. Warum manche (aber nicht alle) Breakpoints f√ºr deine Bilder wichtig sind 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
