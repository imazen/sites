---
taskInputHash: 3d8283d38a166afd
title: Breakpoints & Images
description: Why some (but not all) breakpoints are important for your images
date_published: '2025-02-07'
date_modified: '2025-02-07'
lang: en
---
### Background

Small screens and large monitors require different layouts. For the purpose of `srcset` and `sizes`, we need to know at what point the layout changes.

Web developers need to decide what should be scaled down, hidden, or repositioned on smaller screens – or more often, what should be expanded, revealed, or added on larger screens. They have very little information to base this on. Is the user on a tablet or a phone in landscape mode – or in a small browser window?

We need to choose an arbitrary viewport width where the layout changes. This is called a **breakpoint**. It is an arbitrary number of CSS pixels ([not device pixels](/de/pixels-not-pixels)). Polypane has a [great article](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) about commonly used breakpoints.

Some images (such as logos, icons, or buttons) might be immune to the layout shifts caused by these breakpoints (and do well with [srcset density descriptors](/de/density-descriptors)).

Main content images are constrained by the size of their container. Typically, the main content area of a page is restricted to a specific width, a `max-width`, on the largest screens, but on smaller screens, the main content area will fill the entire viewport.

If you have more than one column at certain breakpoints, it becomes harder to calculate the effective sizes rules because the percentage of the viewport width that the image occupies will change.

### The Simple Method

That said, don't overthink this. You will likely be very satisfied with the following approximation:

1. At what size does the main column (or the image's container) stop growing? Up to this viewport width, we can use `100vw` for the `sizes` attribute of the image to say that the image takes up 100% of the viewport width.
2. What is the maximum width that this container ever reaches? We can set this as a fixed `width` for everything else.

If your answer to 1 was 700px and your answer to 2 was 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels. -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```

> One might think that the browser could wonderfully carry out all these calculations for us based on the CSS. Unfortunately, browsers are impressively eager to choose an image URL *before* downloading the stylesheets. Therefore, we must perform the calculations ourselves, and it's just as well if we don't get it perfect.

{{Clumsy phrasing: "and it's just as well if we don't get it perfect." could be clearer if phrased more directly, such as "and if we don't get it perfect, it's understandable."}}
=====================

Content prompt used: 
Translate the following to German, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'de' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. Breakpoints & Bilder
2. Warum einige (aber nicht alle) Breakpoints für Ihre Bilder wichtig sind 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
