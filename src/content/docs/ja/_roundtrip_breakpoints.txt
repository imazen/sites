---
title: Breakpoints and Images
description: Why (not all) breakpoints matter for images
taskInputHash: ae3cf758bff87e92
lang: en
---
### Background

Different layouts are required for small screens and large monitors. For the purposes of `srcset` and `sizes`, you need to know the points at which the layout changes.

Web developers need to decide what to shrink, hide, or move on small screens or, more generally, what to enlarge, expose or add on large screens. They have limited information. Is the user on a tablet, a landscape phone, or a small browser window?

You need to choose any viewport width at which the layout changes. This is called a **breakpoint**. It's any arbitrary number of CSS pixels (not [device pixels](/en/pixels-not-pixels)) and there is an [excellent article on common breakpoints](https://polypane.app/blog/the-breakpoints-we-tested-in-2021-and-the-ones-to-test-in-2022/#the-breakpoints-to-develop-on-in-2023) used in Polypane.

Some images (like logos, icons, buttons) are immune to the layout changes caused by these breakpoints and do not have any problem with [srcset density descriptors](/en/density-descriptors).

Images in the main content are limited by the size of their container. Typically, the main content area of a page is limited to a specific width at the largest screen, i.e., `max-width` is specified, but on small screens, the main content area takes up the entire viewport.

When there are multiple columns at several breakpoints, it becomes more difficult to calculate valid size specification rules because the percentage of the viewport width that an image occupies changes.

### A Simple Method

So, don't make it too complex. You'll probably get a very reasonable answer with the following approximation.

1. At what size does the main column (or container of the image) stop growing? If the viewport width is less than that, you can specify that the image should occupy 100% of the viewport width with `100vw` in the `sizes` attribute.
2. What is the maximum width that the container reaches? You can set it as a fixed `width` for everything else.

If the answer to 1 is 700px and the answer to 2 is 800px, you can use the following `sizes` attribute:

```html
<!-- These are CSS pixels, not device pixels or image pixels.  -->
<img [...] sizes="(max-width: 700px) 100vw, 800px"  />
```



> You might think that the browser can calculate this because it's very fast at selecting the URL of an image before it downloads CSS. Unfortunately, web browsers select the image URL first, so we have to calculate it ourselves. It doesn't have to be perfect.
=====================

Content prompt used: 
Translate the following to Japanese, preserving all markdown formatting.
        Don't translate html elements or URLs, but do change 'en' to 'ja' inside link addresses.
        Inside code blocks, only translate comments

Metadata prompt used: 
Also carefully translate the title and description for the article; do not use &amp; or &lt; or &gt;
1. Breakpoints & images
 2. Why some (but not all) breakpoints matter for your images

Metadata returned1. ブレークポイントと画像
2. なぜ画像においていくつかの（すべてではない）ブレークポイントが重要なのか 


Roundtrip (isolated) prompt used: 
Translate the following technical documentation to english, preserving all markdown, code blocks, and links. After the translation, list any mistakes or clumsy phrasing or grammar inside brackets, such as Note that the term used here is not the technical term....
